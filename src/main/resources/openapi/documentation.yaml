openapi: "3.0.3"
info:
  title: "poster_api_ktor API"
  description: "poster_api_ktor API"
  version: "1.0.0"
servers:
- url: "http://127.0.0.1:8080"
paths:
  /hello:
    get:
      description: ""
      responses:
        "200":
          description: "OK"
          content:
            text/plain:
              schema:
                type: "string"
              examples:
                Example#1:
                  value: ""
  /login:
    post:
      description: ""
      requestBody:
        content:
          'application/json':
            schema:
              $ref: "#/components/schemas/UserLoginForm"
        required: true
      responses:
        "200":
          description: "OK"
          content:
            'application/json':
              schema:
                type: "string"
        "401":
          description: "Unauthorized"
          content:
            text/plain:
              schema:
                type: "string"
              examples:
                Example#1:
                  value: "Invalid username or password"
  /posts:
    get:
      description: ""
      parameters:
      - name: "start"
        in: "query"
        required: true
        schema:
          type: "integer"
      - name: "amount"
        in: "query"
        required: false
        schema:
          type: "integer"
      responses:
        "200":
          description: "OK"
          content:
            'application/json':
              schema:
                type: "array"
                items:
                  $ref: "#/components/schemas/Post"
  /posts/{post_id}:
    delete:
      description: ""
      parameters:
      - name: "post_id"
        in: "path"
        required: true
        schema:
          type: "integer"
      responses:
        "200":
          description: "OK"
          content:
            'text/plain':
              schema:
                type: "string"
    get:
      description: ""
      parameters:
      - name: "post_id"
        in: "path"
        required: true
        schema:
          type: "integer"
      responses:
        "200":
          description: "OK"
          content:
            'application/json':
              schema:
                $ref: "#/components/schemas/Post"
  /posts/new:
    post:
      description: ""
      responses:
        "200":
          description: "OK"
          content:
            'text/plain':
              schema:
                type: "string"
  /uploads/{user_id}/{file_name}:
    get:
      description: ""
      parameters:
      - name: "user_id"
        in: "path"
        required: true
        schema:
          type: "integer"
      - name: "file_name"
        in: "path"
        required: true
        schema:
          type: "string"
      responses:
        "404":
          description: "Not Found"
          content:
            'text/plain':
              schema:
                type: "string"
              examples:
                Example#1:
                  value: "File not found :p"
        "200":
          description: "OK <br> A file response"
          content:
            application/*:
              schema:
                type: "object"
                format: "binary"
  /users/{id}:
    get:
      description: ""
      parameters:
      - name: "id"
        in: "path"
        required: true
        schema:
          type: "integer"
      responses:
        "200":
          description: "OK"
          content:
            'application/json':
              schema:
                $ref: "#/components/schemas/User"
        "404":
          description: "Not Found"
          content:
            'text/plain':
              schema:
                type: "string"
              examples:
                Example#1:
                  value: "User not found"
  /users/changeAvatar:
    put:
      description: ""
      responses:
        "200":
          description: "OK"
          content:
            'text/plain':
              schema:
                type: "string"
              examples:
                Example#1:
                  value: ""
  /users/me:
    get:
      description: ""
      responses:
        "202":
          description: "Accepted"
          content:
            'application/json':
              schema:
                $ref: "#/components/schemas/User"
        "401":
          description: "Unauthorized"
          content:
            'text/plain':
              schema:
                type: "string"
              examples:
                Example#1:
                  value: "Wrong token!"
    delete:
      description: ""
      responses:
        "202":
          description: "Accepted"
          content:
            'text/plain':
              schema:
                type: "string"
              examples:
                Example#1:
                  value: "Farewell, dear user"
        "500":
          description: "Internal Server Error"
          content:
            'text/plain':
              schema:
                type: "string"
              examples:
                Example#1:
                  value: "Sorry, your deletion was unsuccessful due to problems at\
                    \ our side. Contact us and we'll try to resolve this problem"
  /users/register:
    post:
      description: ""
      requestBody:
        content:
          'application/json':
            schema:
              $ref: "#/components/schemas/UserRegisterForm"
        required: true
      responses:
        "202":
          description: "Accepted"
          content:
            'text/plain':
              schema:
                type: "string"
              examples:
                Example#1:
                  value: "New user is registered"
        "406":
          description: "Not Acceptable"
          content:
            'text/plain':
              schema:
                type: "string"
              examples:
                Example#1:
                  value: "New user is not registered. Check your credentials"
  /users/search:
    get:
      description: ""
      parameters:
      - name: "q"
        in: "query"
        required: true
        schema:
          type: "string"
      responses:
        "200":
          description: "OK"
          content:
            'application/json':
              schema:
                type: "array"
                items:
                  $ref: "#/components/schemas/User"
components:
  schemas:
    UserLoginForm:
      type: "object"
      properties:
        username:
          type: "string"
        password:
          type: "string"
    Post:
      type: "object"
      properties:
        id:
          type: "integer"
          format: "int32"
        description:
          type: "string"
        photosList:
          type: "array"
          items:
            type: "string"
        authorId:
          type: "integer"
          format: "int32"
    User:
      type: "object"
      properties:
        username:
          type: "string"
        profileImg:
          type: "string"
        id:
          type: "integer"
          format: "int32"
    UserRegisterForm:
      type: "object"
      properties:
        username:
          type: "string"
        password:
          type: "string"
        imageUrl:
          type: "string"